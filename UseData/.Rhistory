date: "9/13/2019"
output: pdf_document
---
#4b.
1-pnorm(88,82,10)
#5a.
1-pnorm(8,6.8,0.6)
#5b
pnorm(6,6.8,0.6)
#5c
pnorm(9,6.8,0.6)-pnorm(7,6.8,0.6)
1-pnorm(88,82,10)
x <- (1, 2, 4, NA)
x <- c(1, 2, 4, NA)
x
mean(x)
mean(x, na.rm=TRUE)
seq(1,10, 10)
seq(1, 10, by=10)
seq(1, 10, 1)
seq(1,10, length=10)
seq(1,10, length=20)
seq(1,10, by=0.1)
qnorm(c(0.025,0.975), 16.2, 3.6)
knitr::opts_chunk$set(echo = TRUE)
x <- c(8, 2, 9, 4, 4)
u <- c(4, 2, 6, 2, 3)
x
u
m <- matrix(ncol = 3, nrow = 5)
m
m[,1] <- 1 # first column all 1s
m
m[,2] <- x # second column is the x values
m
1 - 0.5 - 0.4 - 0.25 - 0.15
1 - 0.5 - 0.4 - 0.15 - 0.05
1 - 0.5 - 0.3 - 0.15 - 0.05
1 - 0.5 - 0.3 - 0.15 - 0.05
1 - 0.5
- 0.3
1 - 0.5 - 0.3
1 - 0.5 - 0.3 - 0.15
1 - 0.5 - 0.3 - 0.1
1 - 0.5 - 0.3 - 0.1 -0.07 - 0.05
1 - 0.5 - 0.3 - 0.1 -0.07 - 0.03
1 - 0.5 - 0.3 - 0.15
1 - 0.5 - 0.3 - 0.15
0(0.5) + 1(0.3) + 2(0.15) + 3(0.05)
0*(0.5) + 1*(0.3) + 2*(0.15) + 3*(0.05)
0^2*(0.5) + 1^2*(0.3) + 2^2*(0.15) + 3^2*(0.05)
1.35 - (0.75)^2
library(gapminder)
install.packages("gapminder")
#install.packages("gapminder")
library(gapminder)
gapminder
#install.packages("gapminder")
library(gapminder)
fit <- lm(year ~ lifeExp, data=gapminder)
summary(fit)
fit <- lm(lifeExp ~ year, data=gapminder)
summary(fit)
head(gapminder)
summary(gapminder)
max(lifeExp)
max(gapminder$lifeExp)
.1/.65
weight <- c(180, 190, 158, 155)
height <- c(72, 75, 68, 63)
reg1 <- lm(weight ~ height)
summary(reg1)
#install.packages("gapminder")
library(gapminder)
#install.packages("gapminder")
library(gapminder)
library(gapminder)
library(gapminder)
head(gapminder)
head(gapminder)
tail(gapminder)
#summary stats
summary(gapminder)
# gapminder is a data.frame
head(gapminder)
# summary stats
summary(gapminder)
# to call a column
gapminder$pop
# to call a column
head(gapminder$pop)
library(gapminder)
library(gapminder)
# gapminder is a data.frame
head(gapminder)
tail(gapminder)
# summary stats
summary(gapminder)
# to call a column
head(gapminder$pop)
source('~/Documents/Hamline/Practicum/Tutorial.R')
# summary stats
summary(gapminder)
source('~/Documents/Hamline/Practicum/Tutorial.R', echo=TRUE)
mean.pop <- mean(gapminder$pop)
mean_pop <- mean(gapminder$pop)
mean_pop
mean_pop
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
# gapminder is a data.frame
head(gapminder)
tail(gapminder)
# summary stats
summary(gapminder)
# to call a column
head(gapminder$pop)
# to run one line of code, ctrl-enter
# to run the entire set of code, ctrl-shift-enter
mean_pop <- mean(gapminder$pop)
mean_pop
# to call a column
head(gapminder$pop)
# gapminder is a data.frame
head(gapminder)
# Regression Life Expectency on Year
# LifeExp = B0 + B1*Year
lm(lifeExp ~ year, data=gapminder)
# Regression Life Expectency on Year
# LifeExp = B0 + B1*Year
lm(lifeExp ~ year, data=gapminder)
# If year increases 1, then life expectancy increases 0.3259
reg <- lm(lifeExp ~ year, data=gapminder)
# Summary of results
summary(reg)
help(gapminder)
head(gapminder)
reg2 <- lm(lifeExp ~ year + gdpPercap, data = gapminder)
summary(reg2)
# What are my coefficients of reg?
coef(reg)
B0 <- coef(reg)[1]
B1 <- coef(reg)[2]
B0
B1
B0
B1
reg$coefficients
help(lm)
?lm
# scatter plot
plot(gapminder$year, gapminder$lifeExp)
#install.packages("dplyr")
library(dplyr)
head(gapminder)
# filter my data where country = united states
mydata <- filter(gapminder, country == 'United States')
head(mydata)
# scatter plot
plot(gapminder$year, gapminder$lifeExp)
# scatter plot
plot(mydata$year, mydata$lifeExp)
USreg <- lm(lifeExp ~ year, data=mydata)
summary(USreg)
b2 <- coef(USreg)[2]
b0 <- coef(USreg)[1]
b0 <- coef(USreg)[1]
b1 <- coef(USreg)[2]
USreg.hat <- b0 + b1*mydata$year
USreg.hat
lines(mydata$year, mydata$USreg.hat)
plot(mydata$year, mydata$lifeExp)
lines(mydata$year, USreg.hat$lifeExp)
lines(mydata$year, USreg.hat)
plot(mydata$year, mydata$lifeExp)
lines(mydata$year, USreg.hat)
source('~/Documents/Hamline/Practicum/Tutorial.R', echo=TRUE)
library(ISLR)
summary(Auto)
#(a) Describe the dataset and the column of interest.
nycflights13::flights
view(flights)
nycflights13::flights
install.packages("nycflights13")
#(a) Describe the dataset and the column of interest.
nycflights13::flights
view(flights)
summary(flights)
flights[15]
#(b) Write code to determine how many observations are in the column of interest.
flights[15]
#(c) What is the mean of the column of interest?
avgFlightTime <- mean(flights$air_time, na.rm = TRUE)
#(a) Describe the dataset and the column of interest.
nycflights13::flights
summary(flights)
flights
#(a) Describe the dataset and the column of interest.
flights <- nycflights13::flights
summary(flights)
flights[15]
#(b) Write code to determine how many observations are in the column of interest.
flights[15]
#(c) What is the mean of the column of interest?
avgFlightTime <- mean(flights$air_time, na.rm = TRUE)
#(d) Generate 10,000 samples of length 100 of the column of interest.
sampmeans <- replicate(n=10000, mean(sample(flights$air_time, size = 100)))
sampmeans
#(e) Plot a histogram of the means of the 10,000 samples.
hist(sampmeans, probability = TRUE)
#(f) Find the 95% coverage interval.
quantile(flights$air_time, probs = c(.025, .975), na.rm = TRUE)
#(g) Parameterize the normal distribution and plot it over the histogram.
sdFlightTime <- sd(flights$air_time)
x <- seq(min(sampmeans),max(sampmeans))
y <- dnorm(x, mean = avgFlightTime, sd = sdFlightTime/10)
hist(sampmeans, probability = TRUE)
lines(x,y, col = "blue")
#(h) Find the confidence interval that captures the population mean 95% of the time.
quantile(sampmeans, probs = c(.025, .975))
#(h) Find the confidence interval that captures the population mean 95% of the time.
quantile(sampmeans, probs = c(.025, .975))
#(a) Assume a normal distribution. At 95% confidence, what is the margin of error?
m <- 37.7
sd <- 9.2
se <- 9.2/sqrt(100)
se
#(b) What is the 95% confidence interval for the population mean?
qnorm(c(.025,.975), mean = 37.7, sd = 9.2)
c(m - 1.96*se, m + 1.96*se)
### 3. Confidence Interval [10 pts]
# The operations manager of a large production plant would like to estimate the
# mean amount of time a worker takes to assemble a new electronic component.
# Assume that the standard deviation of this assembly time is 3.6 minutes.
sd <- 3.6
n <- 120
m <- 16.2
#(a) After observing 120 workers assembling similar devices, the manager
#   noticed that their average time was 16.2 minutes. Construct a 95% confidence interval for the mean assembly time.
qnorm(c(.025,.975), mean = 16.2, sd = 3.6)
### 4. Linear Algebra [10 pts]
#Assume the following model:
#$y_i = 12 + 1.3x_i - 0.7u_i$
#Let `x <- c(8, 2, 9, 4, 4)` and `u <- c(4, 2, 6, 2, 3)`.
#Use the `%*%` operator to find the vector $y$.
x <- c(8, 2, 9, 4, 4)
u <- c(4, 2, 6, 2, 3)
m <- matrix(ncol = 3, nrow = 5)
m[,1] <- 1
m[,2] <- x
m[,3] <- u
beta <- c(12, 1.3, .7)
y <- m %*% beta
y
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
head(Boston)
?Boston
nrow(Boston)
Suburbs <- Boston %>%
filter(chas == 0)
nrow(Suburbs)
min(Boston$medv)
?Default
head(Default)
knitr::opts_chunk$set(echo = TRUE)
plot(Auto$horsepower, Auto$mpg)
plot(Auto$horsepower, Auto$mpg)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
SSE <- (-0.2)^2 + (0.4)^2 + (-0.8)^2 + (1.3)^2 + (-0.7)^2
SSE
library(ISLR)
summary(Auto)
plot(Auto$horsepower, Auto$mpg)
pro8 <- lm(Auto$mpg ~ Auto$horsepower)
summary((pro8))
plot(Auto$horsepower, Auto$mpg)
#pro8 <- lm(Auto$mpg ~ Auto$horsepower)
#abline(pro8)
abline(lm(Auto$mpg~Auto$horsepower))
plot(Auto$horsepower, Auto$mpg)
#pro8 <- lm(Auto$mpg ~ Auto$horsepower)
#abline(pro8)
abline(lm(Auto$mpg~Auto$horsepower))
plot(Auto$horsepower, Auto$mpg)
#pro8 <- lm(Auto$mpg ~ Auto$horsepower)
#abline(pro8)
abline(lm(Auto$mpg~Auto$horsepower))
data(TenMileRace)
library(mosaicData)
data(TenMileRace)
source('~/Documents/Hamline/Spring 2020/Week3/Example.R', echo=TRUE)
a
1 - pnorm(18000, mean = 15015, sd = 3540)
library(gapminder)
data("gapminder")
head(gapminder)
gapminder[["year"]]
mean(gapminder[["year"]])
mean(gapminder)[["year"]]
qnorm(c(.025, 0975), mean = housing$sqfeet, sd = popsd/sqrt(100))
qnorm(c(.025, 0975), mean = gapminder$year, sd = popsd/sqrt(100))
qnorm(c(.025, 0975), mean = 200, sd = 13)
USArrests
sleep
Auto
library(ISLR)
Auto
Boston
data(Births2015)
TripCols <- c('household_code', 'projection_factor_magnet', 'month', 'monthR', 'year', 'household_size', 'marital_status', 'household_income', 'male_head_age', 'female_head_age', 'male_head_education', 'female_head_education', 'real_total_spent', 'LogC', 'ChangeLogC', 'LogR', 'ChangeLogR', 'LagLogC', 'LagLogR', 'Change1LogC', 'Change1LogR', 'Lag2LogC', 'Lag2LogR', 'Change2LogC', 'Change2LogR', 'NomR', 'LogNomR', 'ChangeLogNomR', 'LagLogNomR', 'ChangeInf', 'LagInf', 'Change1LogNomR', 'Lag2LogNomR', 'Change1Inf', 'Lag2Inf', 'Change2LogNomR', 'Change2Inf', 'Lag3LogC', 'Lag3LogR', 'Lag3LogNomR', 'Lag3Inf', 'Change3LogC', 'Change3LogR', 'Change3LogNomR', 'Change3Inf', 'Lag4LogC', 'Lag4LogR', 'Lag4LogNomR', 'Lag4Inf')
TripCols
TripCols <- c('household_code', 'monthR', 'month', 'year', 'projection_factor_magnet', 'household_size', 'marital_status', 'household_income', 'male_head_age', 'female_head_age', 'male_head_education', 'female_head_education', 'total_spent', 'LogC', 'ChangeLogC', 'LogR', 'ChangeLogR', 'LagLogC', 'LagLogR', 'Change1LogC', 'Change1LogR', 'Lag2LogC', 'Lag2LogR', 'Change2LogC', 'Change2LogR', 'NomR', 'LogNomR', 'ChangeLogNomR', 'LagLogNomR', 'ChangeInf', 'LagInf', 'Change1LogNomR', 'Lag2LogNomR', 'Change1Inf', 'Lag2Inf', 'Change2LogNomR', 'Change2Inf', 'Lag3LogC', 'Lag3LogR', 'Lag3LogNomR', 'Lag3Inf')
TripsCols
TripCols
data(Boston)
library(MASS)
data(Boston)
help(Boston)
qnorm(c(7,9), 6.8, 0.6)
qnorm(c(7,9), mean=6.8, sd=0.6)
qnorm(0.25, 6.8, 0.6)
qnorm(0.5, 6.8, 0.6)
a <- 5
a
source('~/Documents/Hamline/Spring 2020/Example.R', echo=TRUE)
source('~/Documents/Hamline/Spring 2020/Example.R', echo=TRUE)
source('~/Documents/Hamline/Spring 2020/Example.R', echo=TRUE)
source('~/Documents/Hamline/Spring 2020/Example.R', echo=TRUE)
source('~/Documents/Hamline/Spring 2020/Example.R', echo=TRUE)
a <- 5
b <- 10
c <- a + b
c
source('~/Documents/Hamline/Spring 2020/Example.R', echo=TRUE)
pnorm(86, mean=88, sd=6)
pnord(86, mean=88, sd=6)
help(pnorm)
pnord(86, mean=88, sd=6, lower.tail = True)
pnorm(86, mean=88, sd=6, lower.tail = True)
pnorm(86, mean=88, sd=6, lower.tail = TRUE)
source('~/Documents/Hamline/Spring 2020/Example.R', echo=TRUE)
color <- 'red'
color
str(a)
class(a)
class(a)
class(color)
library(ISLR)
#install.packages("ISLR")
library(ISLR)
data(College)
#install.packages("ISLR")
library(ISLR)
college <- data(College)
mydata <- data(College)
head(mydata)
head(mydata)
mydata <- data(College)
head(mydata)
data(College)
College
#install.packages("ISLR")
library(ISLR)
mydata <- College
head(mydata)
#install.packages("ISLR")
library(ISLR)
College
source('~/Documents/Hamline/Spring 2020/Example.R', echo=TRUE)
head(College)
colnames(College)
names(College)
#install.packages("ISLR")
library(ISLR)
data(College)
head(College)
colnames(College)
gapminder
data(gapminder)
library(gapminder)
pwd()
getwd()
pwd <- getwd()
pwd
mydata <- read.csv("/Users/lancecundy/Research/Nielsen/EIS/UseData/IRData.csv")
mydata <- read.csv("Users/lancecundy/Research/Nielsen/EIS/UseData/IRData.csv")
getwd()
mydata <- read.csv("/Users/lancecundy/Research/Nielsen/EIS/UseData/IRData.csv")
mydata <- read.csv("/Users/lancecundy/Documents/Research/Nielsen/EIS/UseData/IRData.csv")
mydata2 <- read.table("/Users/lancecundy/Documents/Research/Nielsen/EIS/UseData/IRData.csv", sep=',')
head(mydata2)
mydata <- read.csv("/Users/lancecundy/Documents/Research/Nielsen/EIS/UseData/IRData.csv")
mydata2 <- read.table("/Users/lancecundy/Documents/Research/Nielsen/EIS/UseData/IRData.csv", sep=',')
head(mydata)
mydata2 <- read.table("/Users/lancecundy/Documents/Research/Nielsen/EIS/UseData/IRData.csv", sep=',')
head(mmydata)
head(mydata2)
mydata2 <- read.table("/Users/lancecundy/Documents/Research/Nielsen/EIS/UseData/IRData.csv", sep=',', header=TRUE)
head(mydata2)
setwd("/Users/lancecundy/Documents/Research/Nielsen/EIS/UseData/")
getwd()
mydata3 <- read.csv("IRData.csv")
head(mydata3)
library(gapminder)
gapminder
library(gapminder)
head(gapminder)
fit <- lm(lifeExp ~ gdpPercap)
fit <- lm(lifeExp ~ gdpPercap, data=gapminder)
mydata <- gapminder
View(mydata)
summary(fit)
fit2 <- lm(gapminder$lifeExp, gapminder$gdpPercap)
fit2 <- lm(gapminder$lifeExp ~ gapminder$gdpPercap)
plot(gapminder$gdpPercap, gapminder$lifeExp)
head(gapminder)
library(tidyverse)
mydata <- filter(gapminder, year == 1977)
head(mydata)
plot(mydata$gdpPercap, mydata$lifeExp)
plot(mydata$gdpPercap, mydata$pop)
plot(mydata$pop, mydata$gdpPercap)
unique(gapminder$year)
mydata <- filter(gapminder, year == 2007)
plot(mydata$pop, mydata$gdpPercap)
plot(mydata$lifeExp, mydata$gapPerCap)
plot(mydata$lifeExp, mydata$gapPercap)
plot(mydata$lifeExp, mydata$gdpPercap)
mydata <- filter(gapminder, year == 2007) %>%
filter(lifeExp > 70)
plot(mydata$lifeExp, mydata$gdpPercap)
plot(mydata$gdpPercap, mydata$lifeExp)
mydata <- gapminder %>%
filter(year == 1977) %>%
filter(lifeExp > 70)
plot(mydata$gdpPercap, mydata$lifeExp)
fit <- lm(lifeExp ~ gdpPercap, data=mydata)
summary(fit)
plot(predict(fit),mydata$lifeExp,
xlab="predicted",ylab="actual")
abline(a=0,b=1)
plot(mydata$gdpPercap, mydata$lifeExp)
abline(fit)
plot(mydata$gdpPercap, mydata$lifeExp)
abline(fit, color='red')
abline(fit, col='red')
plot(mydata$gdpPercap, mydata$lifeExp)
abline(fit, col='red')
plot(mydata$gdpPercap, mydata$lifeExp)
abline(fit, col='red')
fit <- lm(lifeExp ~ gdpPercap, data=mydata)
summary(fit)
plot(mydata$gdpPercap, mydata$lifeExp)
abline(fit, col='red')
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
mydata <- gapminder
summary(mydata)
# This is a comment
summary(College)
install.packages("pheatmap")
#install.packages("gapminder")
library(gapminder)
library(tidyverse)
head(gapminder)
mydata <- gapminder %>%
filter(year == 1977) %>%
filter(lifeExp > 70)
plot(mydata$gdpPercap, mydata$lifeExp)
fit <- lm(lifeExp ~ gdpPercap, data=mydata)
summary(fit)
fit$adj.r.squared
summary(fit)$r.squared
summary(fit)$adj.r.squared
library(ISLR)
data(Advertising)
library(datasets)
data(trees)
trees
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
head(trees)
nrow(trees)
install.packages("datarium")
library(datarium)
head(marketing)
nrow(marketing)
head(marketing)
install.packages("GGally")
fit1 <- lm(sales ~ youtube, data=marketing)
summary(fit1)
fit1$coefficients[1]
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
attach(Auto)
fix(Auto)
library(ISLR)
attach(Auto)
#fix(Auto)
lm.fit=lm(mpg~horsepower, data=Auto)
lm.fit
summary(lm.fit)
attach(Auto)
plot(horsepower, mpg)
abline(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
Auto
plot(horsepower, mpg data=Auto)
