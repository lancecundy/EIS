dbinom(12,0.5)
install.packages("mosaicData")
pnorm(sd-1)
pnorm(sd=1)
qnorm(c(0.25,0.75), mean = 15105, sd = 3540)
qnorm(c(0.25,0.75), mean = 0, sd = 2.3)
dnorm(0)
dnorm(1)
pnorm(0)
pnorm(1)
pnorm(2.3)
pnorm(1)
qnorm(.9892759)
pnrom(1.7)
pnorm(1.5)
prnorm(1)
pnorm(1)
pnorm(1.3)
pnorm(1.3, mean=0, sd = 2)
pnorm(1.3, mean=0, sd = 1)
pnorm(1)
pnorm(1, lower.tail = FALSE)
data()
USPersonalExpenditure
crimtab
iris
head(iris)
sample(5)
sample,5
sample(6)
install.packages("carData")
library(carData)
AMSsurvey
1 - 0.7 - 0.2 - 0.05 - 0.03 - 0.01
1.25^2
25/4
15/16+1.5625
5*0.25
dbinom(1, size = 5, prob = 0.25)
dbinom(1, size = 1, prob = 0.25)
dbinom(1, prob = 0.25)
dbinom(1, size = 1, prob = 0.25)
dbinom(5, size = 1, prob = 0.25)
dbinom(5, size = 5, prob = 0.25)
dbinom(1, size = 5, prob = 0.25)
pbinom(1, size = 5, prob = 0.25)
pbinom(5, size = 1, prob = 0.25)
pbinom(1, size = 1, prob = 0.25)
pbinom(5, size - 1, prob = 0.25)
pbinom(5, size = 1, prob = 0.25)
(3/4)^5
0.75^5
5(0.25)(1-0.25)
5*(0.25)*(1-0.25)
15/16
pnorm(88, mean=82, sd=10)
qnorm(7, mean=6.8, sd=0.6)
1 - pnorm((88-82)/10, mean=82, sd=10)
1 - pnorm(((88-82)/10), mean=82, sd=10)
---
title: "HW2"
author: "Quynh Ngo"
date: "9/13/2019"
output: pdf_document
---
#4b.
1-pnorm(88,82,10)
#5a.
1-pnorm(8,6.8,0.6)
#5b
pnorm(6,6.8,0.6)
#5c
pnorm(9,6.8,0.6)-pnorm(7,6.8,0.6)
1-pnorm(88,82,10)
x <- (1, 2, 4, NA)
x <- c(1, 2, 4, NA)
x
mean(x)
mean(x, na.rm=TRUE)
seq(1,10, 10)
seq(1, 10, by=10)
seq(1, 10, 1)
seq(1,10, length=10)
seq(1,10, length=20)
seq(1,10, by=0.1)
qnorm(c(0.025,0.975), 16.2, 3.6)
knitr::opts_chunk$set(echo = TRUE)
x <- c(8, 2, 9, 4, 4)
u <- c(4, 2, 6, 2, 3)
x
u
m <- matrix(ncol = 3, nrow = 5)
m
m[,1] <- 1 # first column all 1s
m
m[,2] <- x # second column is the x values
m
1 - 0.5 - 0.4 - 0.25 - 0.15
1 - 0.5 - 0.4 - 0.15 - 0.05
1 - 0.5 - 0.3 - 0.15 - 0.05
1 - 0.5 - 0.3 - 0.15 - 0.05
1 - 0.5
- 0.3
1 - 0.5 - 0.3
1 - 0.5 - 0.3 - 0.15
1 - 0.5 - 0.3 - 0.1
1 - 0.5 - 0.3 - 0.1 -0.07 - 0.05
1 - 0.5 - 0.3 - 0.1 -0.07 - 0.03
1 - 0.5 - 0.3 - 0.15
1 - 0.5 - 0.3 - 0.15
0(0.5) + 1(0.3) + 2(0.15) + 3(0.05)
0*(0.5) + 1*(0.3) + 2*(0.15) + 3*(0.05)
0^2*(0.5) + 1^2*(0.3) + 2^2*(0.15) + 3^2*(0.05)
1.35 - (0.75)^2
library(gapminder)
install.packages("gapminder")
#install.packages("gapminder")
library(gapminder)
gapminder
#install.packages("gapminder")
library(gapminder)
fit <- lm(year ~ lifeExp, data=gapminder)
summary(fit)
fit <- lm(lifeExp ~ year, data=gapminder)
summary(fit)
head(gapminder)
summary(gapminder)
max(lifeExp)
max(gapminder$lifeExp)
.1/.65
weight <- c(180, 190, 158, 155)
height <- c(72, 75, 68, 63)
reg1 <- lm(weight ~ height)
summary(reg1)
#install.packages("gapminder")
library(gapminder)
#install.packages("gapminder")
library(gapminder)
library(gapminder)
library(gapminder)
head(gapminder)
head(gapminder)
tail(gapminder)
#summary stats
summary(gapminder)
# gapminder is a data.frame
head(gapminder)
# summary stats
summary(gapminder)
# to call a column
gapminder$pop
# to call a column
head(gapminder$pop)
library(gapminder)
library(gapminder)
# gapminder is a data.frame
head(gapminder)
tail(gapminder)
# summary stats
summary(gapminder)
# to call a column
head(gapminder$pop)
source('~/Documents/Hamline/Practicum/Tutorial.R')
# summary stats
summary(gapminder)
source('~/Documents/Hamline/Practicum/Tutorial.R', echo=TRUE)
mean.pop <- mean(gapminder$pop)
mean_pop <- mean(gapminder$pop)
mean_pop
mean_pop
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
# gapminder is a data.frame
head(gapminder)
tail(gapminder)
# summary stats
summary(gapminder)
# to call a column
head(gapminder$pop)
# to run one line of code, ctrl-enter
# to run the entire set of code, ctrl-shift-enter
mean_pop <- mean(gapminder$pop)
mean_pop
# to call a column
head(gapminder$pop)
# gapminder is a data.frame
head(gapminder)
# Regression Life Expectency on Year
# LifeExp = B0 + B1*Year
lm(lifeExp ~ year, data=gapminder)
# Regression Life Expectency on Year
# LifeExp = B0 + B1*Year
lm(lifeExp ~ year, data=gapminder)
# If year increases 1, then life expectancy increases 0.3259
reg <- lm(lifeExp ~ year, data=gapminder)
# Summary of results
summary(reg)
help(gapminder)
head(gapminder)
reg2 <- lm(lifeExp ~ year + gdpPercap, data = gapminder)
summary(reg2)
# What are my coefficients of reg?
coef(reg)
B0 <- coef(reg)[1]
B1 <- coef(reg)[2]
B0
B1
B0
B1
reg$coefficients
help(lm)
?lm
# scatter plot
plot(gapminder$year, gapminder$lifeExp)
#install.packages("dplyr")
library(dplyr)
head(gapminder)
# filter my data where country = united states
mydata <- filter(gapminder, country == 'United States')
head(mydata)
# scatter plot
plot(gapminder$year, gapminder$lifeExp)
# scatter plot
plot(mydata$year, mydata$lifeExp)
USreg <- lm(lifeExp ~ year, data=mydata)
summary(USreg)
b2 <- coef(USreg)[2]
b0 <- coef(USreg)[1]
b0 <- coef(USreg)[1]
b1 <- coef(USreg)[2]
USreg.hat <- b0 + b1*mydata$year
USreg.hat
lines(mydata$year, mydata$USreg.hat)
plot(mydata$year, mydata$lifeExp)
lines(mydata$year, USreg.hat$lifeExp)
lines(mydata$year, USreg.hat)
plot(mydata$year, mydata$lifeExp)
lines(mydata$year, USreg.hat)
source('~/Documents/Hamline/Practicum/Tutorial.R', echo=TRUE)
library(ISLR)
summary(Auto)
#(a) Describe the dataset and the column of interest.
nycflights13::flights
view(flights)
nycflights13::flights
install.packages("nycflights13")
#(a) Describe the dataset and the column of interest.
nycflights13::flights
view(flights)
summary(flights)
flights[15]
#(b) Write code to determine how many observations are in the column of interest.
flights[15]
#(c) What is the mean of the column of interest?
avgFlightTime <- mean(flights$air_time, na.rm = TRUE)
#(a) Describe the dataset and the column of interest.
nycflights13::flights
summary(flights)
flights
#(a) Describe the dataset and the column of interest.
flights <- nycflights13::flights
summary(flights)
flights[15]
#(b) Write code to determine how many observations are in the column of interest.
flights[15]
#(c) What is the mean of the column of interest?
avgFlightTime <- mean(flights$air_time, na.rm = TRUE)
#(d) Generate 10,000 samples of length 100 of the column of interest.
sampmeans <- replicate(n=10000, mean(sample(flights$air_time, size = 100)))
sampmeans
#(e) Plot a histogram of the means of the 10,000 samples.
hist(sampmeans, probability = TRUE)
#(f) Find the 95% coverage interval.
quantile(flights$air_time, probs = c(.025, .975), na.rm = TRUE)
#(g) Parameterize the normal distribution and plot it over the histogram.
sdFlightTime <- sd(flights$air_time)
x <- seq(min(sampmeans),max(sampmeans))
y <- dnorm(x, mean = avgFlightTime, sd = sdFlightTime/10)
hist(sampmeans, probability = TRUE)
lines(x,y, col = "blue")
#(h) Find the confidence interval that captures the population mean 95% of the time.
quantile(sampmeans, probs = c(.025, .975))
#(h) Find the confidence interval that captures the population mean 95% of the time.
quantile(sampmeans, probs = c(.025, .975))
#(a) Assume a normal distribution. At 95% confidence, what is the margin of error?
m <- 37.7
sd <- 9.2
se <- 9.2/sqrt(100)
se
#(b) What is the 95% confidence interval for the population mean?
qnorm(c(.025,.975), mean = 37.7, sd = 9.2)
c(m - 1.96*se, m + 1.96*se)
### 3. Confidence Interval [10 pts]
# The operations manager of a large production plant would like to estimate the
# mean amount of time a worker takes to assemble a new electronic component.
# Assume that the standard deviation of this assembly time is 3.6 minutes.
sd <- 3.6
n <- 120
m <- 16.2
#(a) After observing 120 workers assembling similar devices, the manager
#   noticed that their average time was 16.2 minutes. Construct a 95% confidence interval for the mean assembly time.
qnorm(c(.025,.975), mean = 16.2, sd = 3.6)
### 4. Linear Algebra [10 pts]
#Assume the following model:
#$y_i = 12 + 1.3x_i - 0.7u_i$
#Let `x <- c(8, 2, 9, 4, 4)` and `u <- c(4, 2, 6, 2, 3)`.
#Use the `%*%` operator to find the vector $y$.
x <- c(8, 2, 9, 4, 4)
u <- c(4, 2, 6, 2, 3)
m <- matrix(ncol = 3, nrow = 5)
m[,1] <- 1
m[,2] <- x
m[,3] <- u
beta <- c(12, 1.3, .7)
y <- m %*% beta
y
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
head(Boston)
?Boston
nrow(Boston)
Suburbs <- Boston %>%
filter(chas == 0)
nrow(Suburbs)
min(Boston$medv)
?Default
head(Default)
knitr::opts_chunk$set(echo = TRUE)
plot(Auto$horsepower, Auto$mpg)
plot(Auto$horsepower, Auto$mpg)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
SSE <- (-0.2)^2 + (0.4)^2 + (-0.8)^2 + (1.3)^2 + (-0.7)^2
SSE
library(ISLR)
summary(Auto)
plot(Auto$horsepower, Auto$mpg)
pro8 <- lm(Auto$mpg ~ Auto$horsepower)
summary((pro8))
plot(Auto$horsepower, Auto$mpg)
#pro8 <- lm(Auto$mpg ~ Auto$horsepower)
#abline(pro8)
abline(lm(Auto$mpg~Auto$horsepower))
plot(Auto$horsepower, Auto$mpg)
#pro8 <- lm(Auto$mpg ~ Auto$horsepower)
#abline(pro8)
abline(lm(Auto$mpg~Auto$horsepower))
plot(Auto$horsepower, Auto$mpg)
#pro8 <- lm(Auto$mpg ~ Auto$horsepower)
#abline(pro8)
abline(lm(Auto$mpg~Auto$horsepower))
# cd "/extra/agalvao/eis_nielsen"
setwd("/Documents/Research/Nielsen/EIS/UseData")
# cd "/extra/agalvao/eis_nielsen"
setwd("Documents/Research/Nielsen/EIS/UseData")
Trips4 <- read.csv('Datasets/RealTripsChangesWeeklyIRAllTime4.csv')
Trips4 <- read.csv('SampleData.csv')
Trips4
Trips4 <- Trips4[c('household_code', 'week', 'month', 'weekR', 'monthR', 'year', 'Y', 'LogR', 'YInst', 'Lag2LogNomR', 'Lag2Inf')]
Trips4 <- Trips4[c('household_code', 'week', 'month', 'weekR', 'monthR', 'year', 'Y', 'LogR', 'YInst', 'Lag2LogNomR', 'Lag2Inf')]
library(tidyverse)
household_count <- Trips4 %>%
group_by(household_code) %>%
summarise(n())
household_count
# cd "/extra/agalvao/eis_nielsen"
setwd("Documents/Research/Nielsen/EIS")
# cd "/extra/agalvao/eis_nielsen"
setwd("Documents/Research/Nielsen/EIS")
# cd "/extra/agalvao/eis_nielsen"
setwd("Documents/Research/Nielsen/EIS/")
# cd "/extra/agalvao/eis_nielsen"
setwd("Documents/Research/Nielsen/EIS")
getwd()
# cd "/extra/agalvao/eis_nielsen"
setwd("/Users/lancecundy/Documents/Research/Nielsen/EIS")
Trips4 <- read.csv('UseData/SampleData.csv')
Trips4 <- Trips4[c('household_code', 'week', 'month', 'weekR', 'monthR', 'year', 'Y', 'LogR', 'YInst', 'Lag2LogNomR', 'Lag2Inf')]
household_count <- Trips4 %>%
group_by(household_code) %>%
summarise(n())
Trips4
Trips_by_house <- Trips4 %>% split(.$household_code)
mods <- Trips_by_house %>% map(~ rq(Y ~ LogR, data = ., tau = 0.15))
library(quantreg)
mods <- Trips_by_house %>% map(~ rq(Y ~ LogR, data = ., tau = 0.15))
mods
mods <- Trips_by_house %>% map(~ rq(Y ~ LogR, data = ., tau = 0.5))
mods <- Trips_by_house %>% map(~ rq(Y ~ LogR, data = ., tau = c(0.4,0.6)))
mods
mods <- Trips_by_house %>% map(~ rq(Y ~ LogR, data = ., tau = seq(0.1,0.9,0.1)))
length(mods)
mods <- Trips_by_house %>% map(~ rq(Y ~ LogR, data = ., tau = seq(0.5,0.5,0.1)))
mods
length(mods)
mods <- Trips_by_house %>% map(~ rq(Y ~ LogR, data = ., tau = seq(0.1,0.9,0.1)))
mods
library(data.table)
ii <- 1
Years[ii]
Years <- c('2004', '2005', '2006', '2007','2008', '2009', '2010', '2011', '2012', '2013', '2014')
paste0("HMS/"+Years[ii]+"/Annual_Files/panelists_"+Years[ii]+".tsv")
Years{ii}
Years[ii]
paste0("HMS/", Years[ii], "/Annual_Files/panelists_", Years[ii], ".tsv")
library(tidyverse)
a <- c("blue", "red")
b <- c(8, 9)
data <- cbind(a,b)
data
data <- as.data.table(cbind(a,b))
data
str(data)
DT <- data.table(
variable1 = 1:5,
variable2 = c(1,2,5,6,8),
variable3 = c("a","b","c","d","e")
)
DT
str(DT)
data <- data.table(1)[,`:=`(c("va", "vb", "vc"),NA)][,V1:=NULL][.0]
data
DT <- data.table(1)[,`:=`(c("va", "vb", "vc"),NA)][,V1:=NULL][.0]
DT1 <- data.table(
va = 1:5,
vb = c(1,2,5,6,8),
vc = c("a","b","c","d","e")
)
rbind(DT, DT1)
DT <- data.table(1)[,`:=`(c("va", "vb", "vc"),NA)][,V1:=NULL][.0]
DT
DT1 <- data.table(
va = 1:5,
vb = c(1,2,5,6,8),
vc = c("a","b","c","d","e")
)
DT1
rbind(DT, DT1)
rbindlist(DT, DT1)
rbindlist(list(DT, DT1))
panelistsCols <- c('Household_Cd', 'Panel_Year', 'Projection_Factor', 'Projection_Factor_Magnet', 'Household_Income', 'Household_Size', 'Type_Of_Residence', 'Male_Head_Age', 'Female_Head_Age', 'Male_Head_Education', 'Female_Head_Education', 'Male_Head_Occupation', 'Female_Head_Occupation', 'Male_Head_Employment', 'Female_Head_Employment', 'Marital_Status', 'Race', 'Hispanic_Origin', 'Fips_State_Desc')
tripsCols <- c('trip_code_uc', 'household_code', 'retailer_code', 'purchase_date', 'panel_year', 'total_spent')
pandtCols <- left_join(panelistsColsNew, tripsCols, by = c("household_code", "panel_year"))
panelistsColsNew <- c('household_code', 'panel_year', 'projection_factor', 'projection_factor_magnet', 'household_income', 'household_size', 'type_of_residence', 'male_head_age', 'female_head_age', 'male_head_education', 'female_head_education', 'male_head_occupation', 'female_head_occupation', 'male_head_employment', 'female_head_employment', 'marital_status', 'race', 'hispanic_origin', 'fips_state_descr')
pandtCols <- left_join(panelistsColsNew, tripsCols, by = c("household_code", "panel_year"))
panelistsCols <- c('Household_Cd', 'Panel_Year', 'Projection_Factor', 'Projection_Factor_Magnet', 'Household_Income', 'Household_Size', 'Type_Of_Residence', 'Male_Head_Age', 'Female_Head_Age', 'Male_Head_Education', 'Female_Head_Education', 'Male_Head_Occupation', 'Female_Head_Occupation', 'Male_Head_Employment', 'Female_Head_Employment', 'Marital_Status', 'Race', 'Hispanic_Origin', 'Fips_State_Desc')
panelistsColsNew <- c('household_code', 'panel_year', 'projection_factor', 'projection_factor_magnet', 'household_income', 'household_size', 'type_of_residence', 'male_head_age', 'female_head_age', 'male_head_education', 'female_head_education', 'male_head_occupation', 'female_head_occupation', 'male_head_employment', 'female_head_employment', 'marital_status', 'race', 'hispanic_origin', 'fips_state_descr')
tripsCols <- c('trip_code_uc', 'household_code', 'retailer_code', 'purchase_date', 'panel_year', 'total_spent')
retailersCols <- c('retailer_code', 'channel_type')
pandtCols <- left_join(panelistsColsNew, tripsCols, by = c("household_code", "panel_year"))
data.frame(panelistsColsNew)
merge(panelistsColsNew, tripsCols, by = "household_code")
TripsCols[-2]
TripsCols[-2]
tripsCols[-2]
pandtCols <- c(panelistsColsNew, tripsCols[-2])
pandtCols
c <- rbindlist(list(DT, DT1))
ncols(c)
ncol(c)
fwrite(c, "c.csv")
Trips <- data.table(1)[,`:=`(pandtCols,NA)][,V1:=NULL][.0]
Trips
DT <- data.table(1)[,`:=`(c("va", "vb", "vc"),NA)][,V1:=NULL][.0]
DTcols <- c("va", "vb", "vc")
DT <- data.table(1)[,`:=`(DTcols,NA)][,V1:=NULL][.0]
DT
DT <- data.table(1)[,`:=`(eval(DTcols),NA)][,V1:=NULL][.0]
DT
pandtCols
pandtCols <- c(panelistsColsNew, tripsCols[-c("household_code", "panel_year")])
tripsCols <- c('household_code', 'panel_year', 'trip_code_uc', 'retailer_code', 'purchase_date', 'total_spent')
pandtCols <- c(panelistsColsNew, tripsCols[-2])
pandtCols
pandtCols <- c(panelistsColsNew, tripsCols[-1:2])
pandtCols <- c(panelistsColsNew, tripsCols[-(1:2)])
pandtCols
length(Years)
Years <- c('2004', '2005')
length(Years)
