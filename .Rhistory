tau<-seq(0.5)
band <- 0.05
# GMMQ Function
ret2b <- tryCatch(gmmq(tau=tau, dB=2, Y=cbind(Y,D), X=X.excl, Z.excl=Z.excl,
Lambda=Lfn2b.gmmq, Lambda.derivative=Ldfn2b.gmmq,
h=H.HUGE, VERBOSE=FALSE, RETURN.Z=FALSE, b.init=StartingPointReg),
error=function(w)list(b=c(NA,NA),h=NA))
# Get Covariance
cov.est <- cov.est.fn(tau=tau,Y=cbind(Y,D),X=X.excl,Z=Z.excl,Lambda=Lfn2b.gmmq,Lambda.derivative=Ldfn2b.gmmq,beta.hat=ret2b$b,Itilde=Itilde.KS17,Itilde.deriv=Itilde.deriv.KS17,h=H.HUGE,structure=c('ts'),cluster.X.col=0,LRV.kernel=c('Bartlett'),LRV.ST=NA,VERBOSE=FALSE,h.adj=band[j])
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
source("dCGKL_2018_code/gmmq.R")
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
source("Code/dCGKL_2018_code/gmmq.R")
dat <- read.table(file=paste0('Code/dCGKL_2018_code/Yogo/USAQ.txt'),header=TRUE,sep="",na.strings=c("NA","."))
dat <- dat[-(1:2),] #remove missing instruments first two quarters
Z.excl <- as.matrix(dat[,9:12])
Y <- as.matrix(dat[,'dc'])
n <- nrow(Y)
X.excl <- matrix(data=1,nrow=n, ncol=1)
D <- as.matrix(dat[,'rrf'])
Z.excl <- as.matrix(dat[,9:12])
Z <- cbind(Z.excl, X.excl)
X <- cbind(D, X.excl)
# Yogo (2004) 2SLS log-linear estimator
PZ <- Z %*% solve(t(Z)%*%Z) %*% t(Z)
StartingPointReg <- solve(t(X)%*%PZ%*%X) %*% (t(X)%*%PZ%*%Y)
# conv.fn convert log-linear fn's (b[1],b[2])=(slope, constant) to (beta, gamma)
conv.fn <- function(b) c(exp(b[2]/b[1]), 1/b[1]) #convert log-linear parameters to (beta,gamma)
conv.inv.fn <- function(b) c(log(b[2])/b[1], 1/b[1])
# conv.fn convert log-linear fn's (b[1],b[2])=(slope, constant) to (beta, EIS)
conv2.fn <- function(b) c(exp(b[2]/b[1]), b[1]) #convert log-linear parameters to (beta,EIS)
conv2.inv.fn <- function(b) c(log(b[2])*b[1], b[1])
conv3.fn <- function(b) c(b[1],1/b[2]) # convert (beta,gamma) to (beta,EIS)
conv3.inv.fn <- function(b) c(b[1],1/b[2])
# Residual/Lambda functions (and derivatives) for smoothed MM estimation
Lfn.gmmq <- function(y,x,b) y[,1]-cbind(y[,-1],x)%*%b  #log-linear
Ldfn.gmmq <- function(y,x,b) -cbind(y[,-1],x)
Lfn2b.gmmq <- function(y,x,b) -Lfn.gmmq(y,x,b) #-y[,1]+cbind(x,y[,-1])%*%b #log-linear, 1-tau
Ldfn2b.gmmq <- function(y,x,b) -Ldfn.gmmq(y,x,b) #cbind(x,y[,-1])
Lfn2.gmmq <- function(y,x,b) b[1]*exp(y[,1])^(-b[2])*exp(y[,2]) - 1 #nonlinear (beta,gamma)
Ldfn2.gmmq <- function(y,x,b) cbind((Lfn2.gmmq(y=y,x=x,b=b)+1) / b[1],
-y[,1]*(Lfn2.gmmq(y=y,x=x,b=b)+1))
Lfn22.gmmq <- function(y,x,b) b[1]*exp(y[,1])^(-1/b[2])*exp(y[,2]) - 1 #nonlinear (beta,EIS)
Ldfn22.gmmq <- function(y,x,b) cbind((Lfn2.gmmq(y=y,x=x,b=b)+1) / b[1],
y[,1]*(Lfn2.gmmq(y=y,x=x,b=b)+1)/b[2]^2)
# Residual/Lambda functions (and derivatives) for smoothed GMM estimation
Lfn <- function(y,x,b) y-x%*%b  #log-linear
Ldfn <- function(y,x,b) -x
Lfn2b <- function(y,x,b) -Lfn(y,x,b) #-y+x%*%b #log-linear, 1-tau
Ldfn2b <- function(y,x,b) -Ldfn(y,x,b) #x
Lfn2 <- function(y,x,b) b[1]*exp(y)^(-b[2])*exp(x[,1]) - 1 #nonlinear (beta,gamma)
Ldfn2 <- function(y,x,b) cbind((Lfn2(y=y,x=x,b=b)+1) / b[1],
-y*(Lfn2(y=y,x=x,b=b)+1))
Lfn22 <- function(y,x,b) b[1]*exp(y)^(-1/b[2])*exp(x[,1]) - 1 #nonlinear (beta,gamma)
Ldfn22 <- function(y,x,b) cbind((Lfn2(y=y,x=x,b=b)+1) / b[1],
y*(Lfn2(y=y,x=x,b=b)+1)/b[2]^2)
## Initialize  Variables
H.HUGE <- 0.001
tau<-seq(0.5)
band <- 0.05
# GMMQ Function
ret2b <- tryCatch(gmmq(tau=tau, dB=2, Y=cbind(Y,D), X=X.excl, Z.excl=Z.excl,
Lambda=Lfn2b.gmmq, Lambda.derivative=Ldfn2b.gmmq,
h=H.HUGE, VERBOSE=FALSE, RETURN.Z=FALSE, b.init=StartingPointReg),
error=function(w)list(b=c(NA,NA),h=NA))
rret2b
ret2b
tau
tau<-0.5
band <- 0.05
# GMMQ Function
ret2b <- tryCatch(gmmq(tau=tau, dB=2, Y=cbind(Y,D), X=X.excl, Z.excl=Z.excl,
Lambda=Lfn2b.gmmq, Lambda.derivative=Ldfn2b.gmmq,
h=H.HUGE, VERBOSE=FALSE, RETURN.Z=FALSE, b.init=StartingPointReg),
error=function(w)list(b=c(NA,NA),h=NA))
# Get Covariance
cov.est <- cov.est.fn(tau=tau,Y=cbind(Y,D),X=X.excl,Z=Z.excl,Lambda=Lfn2b.gmmq,Lambda.derivative=Ldfn2b.gmmq,beta.hat=ret2b$b,Itilde=Itilde.KS17,Itilde.deriv=Itilde.deriv.KS17,h=H.HUGE,structure=c('ts'),cluster.X.col=0,LRV.kernel=c('Bartlett'),LRV.ST=NA,VERBOSE=FALSE,h.adj=band[j])
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
source("Code/dCGKL_2018_code/gmmq.R")
dat <- read.table(file=paste0('Code/dCGKL_2018_code/Yogo/USAQ.txt'),header=TRUE,sep="",na.strings=c("NA","."))
dat <- dat[-(1:2),] #remove missing instruments first two quarters
Z.excl <- as.matrix(dat[,9:12])
Y <- as.matrix(dat[,'dc'])
n <- nrow(Y)
X.excl <- matrix(data=1,nrow=n, ncol=1)
D <- as.matrix(dat[,'rrf'])
Z.excl <- as.matrix(dat[,9:12])
Z <- cbind(Z.excl, X.excl)
X <- cbind(D, X.excl)
# Yogo (2004) 2SLS log-linear estimator
PZ <- Z %*% solve(t(Z)%*%Z) %*% t(Z)
StartingPointReg <- solve(t(X)%*%PZ%*%X) %*% (t(X)%*%PZ%*%Y)
# conv.fn convert log-linear fn's (b[1],b[2])=(slope, constant) to (beta, gamma)
conv.fn <- function(b) c(exp(b[2]/b[1]), 1/b[1]) #convert log-linear parameters to (beta,gamma)
conv.inv.fn <- function(b) c(log(b[2])/b[1], 1/b[1])
# conv.fn convert log-linear fn's (b[1],b[2])=(slope, constant) to (beta, EIS)
conv2.fn <- function(b) c(exp(b[2]/b[1]), b[1]) #convert log-linear parameters to (beta,EIS)
conv2.inv.fn <- function(b) c(log(b[2])*b[1], b[1])
conv3.fn <- function(b) c(b[1],1/b[2]) # convert (beta,gamma) to (beta,EIS)
conv3.inv.fn <- function(b) c(b[1],1/b[2])
# Residual/Lambda functions (and derivatives) for smoothed MM estimation
Lfn.gmmq <- function(y,x,b) y[,1]-cbind(y[,-1],x)%*%b  #log-linear
Ldfn.gmmq <- function(y,x,b) -cbind(y[,-1],x)
Lfn2b.gmmq <- function(y,x,b) -Lfn.gmmq(y,x,b) #-y[,1]+cbind(x,y[,-1])%*%b #log-linear, 1-tau
Ldfn2b.gmmq <- function(y,x,b) -Ldfn.gmmq(y,x,b) #cbind(x,y[,-1])
Lfn2.gmmq <- function(y,x,b) b[1]*exp(y[,1])^(-b[2])*exp(y[,2]) - 1 #nonlinear (beta,gamma)
Ldfn2.gmmq <- function(y,x,b) cbind((Lfn2.gmmq(y=y,x=x,b=b)+1) / b[1],
-y[,1]*(Lfn2.gmmq(y=y,x=x,b=b)+1))
Lfn22.gmmq <- function(y,x,b) b[1]*exp(y[,1])^(-1/b[2])*exp(y[,2]) - 1 #nonlinear (beta,EIS)
Ldfn22.gmmq <- function(y,x,b) cbind((Lfn2.gmmq(y=y,x=x,b=b)+1) / b[1],
y[,1]*(Lfn2.gmmq(y=y,x=x,b=b)+1)/b[2]^2)
# Residual/Lambda functions (and derivatives) for smoothed GMM estimation
Lfn <- function(y,x,b) y-x%*%b  #log-linear
Ldfn <- function(y,x,b) -x
Lfn2b <- function(y,x,b) -Lfn(y,x,b) #-y+x%*%b #log-linear, 1-tau
Ldfn2b <- function(y,x,b) -Ldfn(y,x,b) #x
Lfn2 <- function(y,x,b) b[1]*exp(y)^(-b[2])*exp(x[,1]) - 1 #nonlinear (beta,gamma)
Ldfn2 <- function(y,x,b) cbind((Lfn2(y=y,x=x,b=b)+1) / b[1],
-y*(Lfn2(y=y,x=x,b=b)+1))
Lfn22 <- function(y,x,b) b[1]*exp(y)^(-1/b[2])*exp(x[,1]) - 1 #nonlinear (beta,gamma)
Ldfn22 <- function(y,x,b) cbind((Lfn2(y=y,x=x,b=b)+1) / b[1],
y*(Lfn2(y=y,x=x,b=b)+1)/b[2]^2)
## Initialize  Variables
H.HUGE <- 0.001
tau<-0.5
band <- 0.05
# GMMQ Function
ret2b <- tryCatch(gmmq(tau=tau, dB=2, Y=cbind(Y,D), X=X.excl, Z.excl=Z.excl,
Lambda=Lfn2b.gmmq, Lambda.derivative=Ldfn2b.gmmq,
h=H.HUGE, VERBOSE=FALSE, RETURN.Z=FALSE, b.init=StartingPointReg),
error=function(w)list(b=c(NA,NA),h=NA))
# Get Covariance
cov.est <- cov.est.fn(tau=tau,Y=cbind(Y,D),X=X.excl,Z=Z.excl,Lambda=Lfn2b.gmmq,Lambda.derivative=Ldfn2b.gmmq,beta.hat=ret2b$b,Itilde=Itilde.KS17,Itilde.deriv=Itilde.deriv.KS17,h=H.HUGE,structure=c('ts'),cluster.X.col=0,LRV.kernel=c('Bartlett'),LRV.ST=NA,VERBOSE=FALSE,h.adj=band[j])
ret2b
source('~/Documents/Research/Nielsen/EIS/Code/YogoExample.R', echo=TRUE)
Y
X
Z
Z.excl
G.hat <- G.est.fn(Y=cbind(Y,D),X=X.excl,Z=Z.excl,Lambda=Lfn2b.gmmq,Lambda.derivative=Ldfn2b.gmmq,beta.hat=ret2b$b,Itilde.deriv=Itilde.deriv.KS17,h=H.HUGE,VERBOSE=FALSE)
G.hat
# Get Covariance
cov.est <- cov.est.fn(tau=tau,Y=cbind(Y,D),X=X.excl,Z=Z.excl,Lambda=Lfn2b.gmmq,Lambda.derivative=Ldfn2b.gmmq,beta.hat=ret2b$b,Itilde=Itilde.KS17,Itilde.deriv=Itilde.deriv.KS17,h=H.HUGE,structure=c('ts'),cluster.X.col=0,LRV.kernel=c('Bartlett'),LRV.ST=NA,VERBOSE=FALSE,h.adj=band[j])
# Get Covariance
cov.est <- cov.est.fn(tau=tau,Y=cbind(Y,D),X=X.excl,Z=Z.excl,Lambda=Lfn2b.gmmq,Lambda.derivative=Ldfn2b.gmmq,beta.hat=ret2b$b,Itilde=Itilde.KS17,Itilde.deriv=Itilde.deriv.KS17,h=H.HUGE,structure=c('ts'),cluster.X.col=0,LRV.kernel=c('Bartlett'),LRV.ST=NA,VERBOSE=FALSE,h.adj=band)
G.hat <- G.est.fn(Y=cbind(Y,D),X=X.excl,Z=Z.excl,Lambda=Lfn2b.gmmq,Lambda.derivative=Ldfn2b.gmmq,beta.hat=ret2b$b,Itilde.deriv=Itilde.deriv.KS17,h=H.HUGE,VERBOSE=FALSE)
G.hat
cov.hat
cov.est
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
source("Code/dCGKL_2018_code/gmmq.R")
dat <- read.table(file=paste0('Code/dCGKL_2018_code/Yogo/USAQ.txt'),header=TRUE,sep="",na.strings=c("NA","."))
dat <- dat[-(1:2),] #remove missing instruments first two quarters
Z.excl <- as.matrix(dat[,9:12])
Y <- as.matrix(dat[,'dc'])
n <- nrow(Y)
X.excl <- matrix(data=1,nrow=n, ncol=1)
D <- as.matrix(dat[,'rrf'])
Z.excl <- as.matrix(dat[,9:12])
Z <- cbind(Z.excl, X.excl)
X <- cbind(D, X.excl)
# Yogo (2004) 2SLS log-linear estimator
PZ <- Z %*% solve(t(Z)%*%Z) %*% t(Z)
b.2sls <- solve(t(X)%*%PZ%*%X) %*% (t(X)%*%PZ%*%Y)
# conv.fn convert log-linear fn's (b[1],b[2])=(slope, constant) to (beta, gamma)
conv.fn <- function(b) c(exp(b[2]/b[1]), 1/b[1]) #convert log-linear parameters to (beta,gamma)
conv.inv.fn <- function(b) c(log(b[2])/b[1], 1/b[1])
# conv.fn convert log-linear fn's (b[1],b[2])=(slope, constant) to (beta, EIS)
conv2.fn <- function(b) c(exp(b[2]/b[1]), b[1]) #convert log-linear parameters to (beta,EIS)
conv2.inv.fn <- function(b) c(log(b[2])*b[1], b[1])
conv3.fn <- function(b) c(b[1],1/b[2]) # convert (beta,gamma) to (beta,EIS)
conv3.inv.fn <- function(b) c(b[1],1/b[2])
# Residual/Lambda functions (and derivatives) for smoothed MM estimation
Lfn.gmmq <- function(y,x,b) y[,1]-cbind(y[,-1],x)%*%b  #log-linear
Ldfn.gmmq <- function(y,x,b) -cbind(y[,-1],x)
source('~/Documents/Research/Nielsen/EIS/Code/YogoExample.R', echo=TRUE)
### Set these paths ###
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS/Code')
source("dCGKL_2018_code/gmmq.R")
source('~/Documents/Research/Nielsen/EIS/Code/YogoExample.R', echo=TRUE)
source('~/Documents/Research/Nielsen/EIS/Code/YogoExample.R', echo=TRUE)
ret2b
# Change your directory for these two lines
mydata <- read.csv('SampleData.csv')
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
mydata <- read.csv('UseData/SampleData.csv')
mydata %>%
group_by(household_code) %>%
count() %>%
ungroup()
mydata.i <- mydata %>%
filter(household_code == 2000000)
source("Code/dCGKL_2018_code/gmmq.R")
## Setup Data
Y <- as.matrix(mydata.i$Y)
n <- nrow(Y)
X.excl <- matrix(data=1, nrow=n, ncol=1)
D <- as.matrix(mydata.i$LogR)
Z.excl <- as.matrix(cbind(mydata.i$YInst, mydata.i$Lag2LogNomR, mydata.i$Lag2Inf))
Z <- cbind(Z.excl, X.excl)
X <- cbind(D, X.excl)
head(mydata)
rand(1,5)
rand
rand(1)
rand(1) * 100
rand(1) * 100
rand(1) * 100
mydata %>%
group_by(household_code) %>%
mutate(household_income = rand(1)*100) %>%
ungroup()
head(mydata)
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
mydata <- read.csv('UseData/SampleData.csv')
mydata <- mydata %>%
group_by(household_code) %>%
mutate(household_income = rand(1)*100) %>%
ungroup()
head(mydat)
head(mydata)
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
mydata <- read.csv('UseData/SampleData.csv')
mydata.i <- mydata %>%
group_by(household_code) %>%
mutate(household_income = rand(1)*100) %>%
ungroup()
source("Code/dCGKL_2018_code/gmmq.R")
## Setup Data
Y <- as.matrix(mydata.i$Y)
n <- nrow(Y)
#X.excl <- matrix(data=1, nrow=n, ncol=1)
X.excl <- cbind(matrix(data=1, nrow=n, ncol=1), mydata.i$household_income)
X.excl
D <- as.matrix(mydata.i$LogR)
Z.excl <- as.matrix(cbind(mydata.i$YInst, mydata.i$Lag2LogNomR, mydata.i$Lag2Inf))
Z <- cbind(Z.excl, X.excl)
X <- cbind(D, X.excl)
## Yogo (2004) 2SLS log-linear estimator as a starting point
PZ <- Z %*% solve(t(Z)%*%Z) %*% t(Z)
StartingPointReg <- solve(t(X)%*%PZ%*%X) %*% (t(X)%*%PZ%*%Y)
StartingPointReg
X
# conv.fn convert log-linear fn's (b[1],b[2])=(slope, constant) to (beta, gamma)
conv.fn <- function(b) c(exp(b[2]/b[1]), 1/b[1]) #convert log-linear parameters to (beta,gamma)
conv.inv.fn <- function(b) c(log(b[2])/b[1], 1/b[1])
# conv.fn convert log-linear fn's (b[1],b[2])=(slope, constant) to (beta, EIS)
conv2.fn <- function(b) c(exp(b[2]/b[1]), b[1]) #convert log-linear parameters to (beta,EIS)
conv2.inv.fn <- function(b) c(log(b[2])*b[1], b[1])
conv3.fn <- function(b) c(b[1],1/b[2]) # convert (beta,gamma) to (beta,EIS)
conv3.inv.fn <- function(b) c(b[1],1/b[2])
# Residual/Lambda functions (and derivatives) for smoothed MM estimation
Lfn.gmmq <- function(y,x,b) y[,1]-cbind(y[,-1],x)%*%b  #log-linear
Ldfn.gmmq <- function(y,x,b) -cbind(y[,-1],x)
Lfn2b.gmmq <- function(y,x,b) -Lfn.gmmq(y,x,b) #-y[,1]+cbind(x,y[,-1])%*%b #log-linear, 1-tau
Ldfn2b.gmmq <- function(y,x,b) -Ldfn.gmmq(y,x,b) #cbind(x,y[,-1])
Lfn2.gmmq <- function(y,x,b) b[1]*exp(y[,1])^(-b[2])*exp(y[,2]) - 1 #nonlinear (beta,gamma)
Ldfn2.gmmq <- function(y,x,b) cbind((Lfn2.gmmq(y=y,x=x,b=b)+1) / b[1],
-y[,1]*(Lfn2.gmmq(y=y,x=x,b=b)+1))
Lfn22.gmmq <- function(y,x,b) b[1]*exp(y[,1])^(-1/b[2])*exp(y[,2]) - 1 #nonlinear (beta,EIS)
Ldfn22.gmmq <- function(y,x,b) cbind((Lfn2.gmmq(y=y,x=x,b=b)+1) / b[1],
y[,1]*(Lfn2.gmmq(y=y,x=x,b=b)+1)/b[2]^2)
# Residual/Lambda functions (and derivatives) for smoothed GMM estimation
Lfn <- function(y,x,b) y-x%*%b  #log-linear
Ldfn <- function(y,x,b) -x
Lfn2b <- function(y,x,b) -Lfn(y,x,b) #-y+x%*%b #log-linear, 1-tau
Ldfn2b <- function(y,x,b) -Ldfn(y,x,b) #x
Lfn2 <- function(y,x,b) b[1]*exp(y)^(-b[2])*exp(x[,1]) - 1 #nonlinear (beta,gamma)
Ldfn2 <- function(y,x,b) cbind((Lfn2(y=y,x=x,b=b)+1) / b[1],
-y*(Lfn2(y=y,x=x,b=b)+1))
Lfn22 <- function(y,x,b) b[1]*exp(y)^(-1/b[2])*exp(x[,1]) - 1 #nonlinear (beta,gamma)
Ldfn22 <- function(y,x,b) cbind((Lfn2(y=y,x=x,b=b)+1) / b[1],
y*(Lfn2(y=y,x=x,b=b)+1)/b[2]^2)
## Initialize  Variables
H.HUGE <- 0.001
tau<-seq(0.1,0.9,0.1)
nt<-length(tau)
coef.beta<-array(0,dim=c(nt,1))
coef.eis<-array(0,dim=c(nt,1))
se.beta<-array(0,dim=c(nt,1))
se.eis<-array(0,dim=c(nt,1))
band.eis<-array(0,dim=c(nt,1))
#band <- 1
band<-seq(0.05,0.95,0.45)
nb<-length(band)
for (i in 1:nt){
print(tau[i])
# GMMQ Function
ret2b <- tryCatch(gmmq(tau=tau[i], dB=2, Y=cbind(Y,D), X=X.excl, Z.excl=Z.excl,
Lambda=Lfn2b.gmmq, Lambda.derivative=Ldfn2b.gmmq,
h=H.HUGE, VERBOSE=FALSE, RETURN.Z=FALSE, b.init=StartingPointReg),
error=function(w)list(b=c(NA,NA),h=NA))
# Get Coefficients
coef.beta[i]<-conv2.fn(ret2b$b)[1]
coef.eis[i]<-conv2.fn(ret2b$b)[2]
# Get G
g.theta1<-1/(coef.beta[i]*coef.eis[i])
g.theta2<--log(coef.beta[i])*(1/coef.eis[i]^2)
g.theta<-c(g.theta1,g.theta2)
# Create empty SE matrix
se.beta.t<-array(0,dim=c(nb,1))
se.eis.t<-array(0,dim=c(nb,1))
for (j in 1:nb){
print(band[j])
# Get Covariance
cov.est <- cov.est.fn(tau=tau,Y=cbind(Y,D),X=X.excl,Z=Z.excl,Lambda=Lfn2b.gmmq,Lambda.derivative=Ldfn2b.gmmq,beta.hat=ret2b$b,Itilde=Itilde.KS17,Itilde.deriv=Itilde.deriv.KS17,h=H.HUGE,structure=c('ts'),cluster.X.col=0,LRV.kernel=c('Bartlett'),LRV.ST=NA,VERBOSE=FALSE,h.adj=band[j])
# Y=cbind(Y,D)
# X=X.excl
# Z=Z.excl
# Lambda=Lfn2b.gmmq
# Lambda.derivative=Ldfn2b.gmmq
# beta.hat=ret2b$b
# Itilde.deriv=Itilde.deriv.KS17
# h=H.HUGE
# VERBOSE=FALSE
#   n <- dim(Z)[1]
#   L <- Lfn2b.gmmq(Y,X,beta.hat)
#   Ld <- Ldfn2b.gmmq(Y,X,beta.hat)
#   # tmpsum <- array(0,dim=c(dim(Z)[2],length(beta.hat)))
#   # for (i in 1:n) {
#   #   tmp <- Itilde.deriv(-L[i]/h) *
#   #     matrix(Z[i,],ncol=1) %*% matrix(Ld[i,], nrow=1)
#   #   tmpsum <- tmpsum + tmp
#   # }
#   tmpsum2 <- t(array(data=Itilde.deriv(-L/h),dim=dim(Z)) * Z) %*% Ld
#   G.hat <- (-tmpsum2/(n*h))
#
#   Ginv <- tryCatch(solve(G.hat))
print("cov")
print(cov.est)
# Get SE when the cov matrix comes out
if (all(is.na(cov.est))) {
se.beta.t[j] <- NA
se.eis.t[j] <- NA
} else {
cov <- cov.est
cov_beta<-g.theta%*%cov%*%g.theta
cov_eis<-cov[2,2]
se.beta.t[j]<-sqrt(cov_beta/n)
se.eis.t[j]<-sqrt(cov_eis/n)
}
print("se.eis.t")
print(se.eis.t[j])
}
print("Made it through")
print(se.eis.t)
print(which.min(se.eis.t))
print(band[which.min(se.eis.t)])
print(se.beta.t[which.min(se.eis.t)])
print(se.eis.t[which.min(se.eis.t)])
# Get minimum SE
MinLoc <- which.min(se.eis.t)
finalband <- band[MinLoc]
min.se.beta <- se.beta.t[MinLoc]
min.se.eis <- se.eis.t[MinLoc]
# Keep minimum SE
se.beta[i]<-min.se.beta
se.eis[i]<-min.se.eis
band.eis[i] <- finalband
}
## Initialize  Variables
dimX <- 3
for (i in 1:nt){
print(tau[i])
# GMMQ Function
ret2b <- tryCatch(gmmq(tau=tau[i], dB=dimX, Y=cbind(Y,D), X=X.excl, Z.excl=Z.excl,
Lambda=Lfn2b.gmmq, Lambda.derivative=Ldfn2b.gmmq,
h=H.HUGE, VERBOSE=FALSE, RETURN.Z=FALSE, b.init=StartingPointReg),
error=function(w)list(b=c(NA,NA),h=NA))
# Get Coefficients
coef.beta[i]<-conv2.fn(ret2b$b)[1]
coef.eis[i]<-conv2.fn(ret2b$b)[2]
# Get G
g.theta1<-1/(coef.beta[i]*coef.eis[i])
g.theta2<--log(coef.beta[i])*(1/coef.eis[i]^2)
g.theta<-c(g.theta1,g.theta2)
# Create empty SE matrix
se.beta.t<-array(0,dim=c(nb,1))
se.eis.t<-array(0,dim=c(nb,1))
for (j in 1:nb){
print(band[j])
# Get Covariance
cov.est <- cov.est.fn(tau=tau,Y=cbind(Y,D),X=X.excl,Z=Z.excl,Lambda=Lfn2b.gmmq,Lambda.derivative=Ldfn2b.gmmq,beta.hat=ret2b$b,Itilde=Itilde.KS17,Itilde.deriv=Itilde.deriv.KS17,h=H.HUGE,structure=c('ts'),cluster.X.col=0,LRV.kernel=c('Bartlett'),LRV.ST=NA,VERBOSE=FALSE,h.adj=band[j])
# Y=cbind(Y,D)
# X=X.excl
# Z=Z.excl
# Lambda=Lfn2b.gmmq
# Lambda.derivative=Ldfn2b.gmmq
# beta.hat=ret2b$b
# Itilde.deriv=Itilde.deriv.KS17
# h=H.HUGE
# VERBOSE=FALSE
#   n <- dim(Z)[1]
#   L <- Lfn2b.gmmq(Y,X,beta.hat)
#   Ld <- Ldfn2b.gmmq(Y,X,beta.hat)
#   # tmpsum <- array(0,dim=c(dim(Z)[2],length(beta.hat)))
#   # for (i in 1:n) {
#   #   tmp <- Itilde.deriv(-L[i]/h) *
#   #     matrix(Z[i,],ncol=1) %*% matrix(Ld[i,], nrow=1)
#   #   tmpsum <- tmpsum + tmp
#   # }
#   tmpsum2 <- t(array(data=Itilde.deriv(-L/h),dim=dim(Z)) * Z) %*% Ld
#   G.hat <- (-tmpsum2/(n*h))
#
#   Ginv <- tryCatch(solve(G.hat))
print("cov")
print(cov.est)
# Get SE when the cov matrix comes out
if (all(is.na(cov.est))) {
se.beta.t[j] <- NA
se.eis.t[j] <- NA
} else {
cov <- cov.est
cov_beta<-g.theta%*%cov%*%g.theta
cov_eis<-cov[2,2]
se.beta.t[j]<-sqrt(cov_beta/n)
se.eis.t[j]<-sqrt(cov_eis/n)
}
print("se.eis.t")
print(se.eis.t[j])
}
print("Made it through")
print(se.eis.t)
print(which.min(se.eis.t))
print(band[which.min(se.eis.t)])
print(se.beta.t[which.min(se.eis.t)])
print(se.eis.t[which.min(se.eis.t)])
# Get minimum SE
MinLoc <- which.min(se.eis.t)
finalband <- band[MinLoc]
min.se.beta <- se.beta.t[MinLoc]
min.se.eis <- se.eis.t[MinLoc]
# Keep minimum SE
se.beta[i]<-min.se.beta
se.eis[i]<-min.se.eis
band.eis[i] <- finalband
}
g.theta
source('~/Documents/Research/Nielsen/EIS/Code/identification_covariates_noSE.R', echo=TRUE)
QGMMResults
source('~/Documents/Research/Nielsen/EIS/Code/YogoRep.R', echo=TRUE)
library(tidyverse)
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
mydata <- read.csv('UseData/SampleData.csv')
mydata
mydata.i <- mydata %>%
mutate(household_income = rand(1)*100)
head(mydata.i)
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
mydata <- read.csv('UseData/SampleData.csv')
mydata.i <- mydata %>%
mutate(household_income = rand(1)*100)
setwd('/Users/lancecundy/Documents/Research/Nielsen/EIS')
mydata <- read.csv('UseData/SampleData.csv')
mydata.i <- mydata %>%
mutate(household_income = rand(1)*100) %>%
group_by(household_code) %>%
mutate(lagincome = lag(household_income)) %>%
ungroup()
head(mydata.i)
head(mydata.i[-3])
mydata.i
print(mydata.i, n = 10, width = 13)
print(mydata.i, width = 13)
print(as.data.frame(mydata.i))
rand(2)
rand(1)
rand(2,1)
mydata.i <- mydata %>%
mutate(household_income = rand(nrow(mydata),1)*100) %>%
group_by(household_code) %>%
mutate(lagincome = lag(household_income)) %>%
ungroup()
print(as.data.frame(mydata.i))
mydata.i <- mydata %>%
mutate(household_income = rand(nrow(mydata),1)*100) %>%
group_by(household_code) %>%
mutate(lagincome = dplyr::lag(household_income)) %>%
ungroup()
print(as.data.frame(mydata.i))
mydata.i <- mydata %>%
mutate(household_income = rand(nrow(mydata),1)*100) %>%
group_by(household_code) %>%
mutate(lagincome = dplyr::lag(household_income)) %>%
ungroup() %>%
mutate(income_change = household_income - lagincome)
print(as.data.frame(mydata.i))
mydata.i <- mydata %>%
mutate(household_income = rand(nrow(mydata),1)*100) %>%
group_by(household_code) %>%
mutate(lagincome = dplyr::lag(household_income)) %>%
ungroup() %>%
mutate(income_change = household_income - lagincome) %>%
drop_na()
print(as.data.frame(mydata.i))
mydata.i <- mydata %>%
mutate(household_income = rand(nrow(mydata),1)*100) %>%
group_by(household_code) %>%
mutate(lagincome = dplyr::lag(household_income)) %>%
ungroup() %>%
mutate(income_change = household_income - lagincome) %>%
drop_na() %>%
mutate(increase_income = ifelse(income_change > 0, 1, 0)) %>%
mutate(decrease_income = ifelse(income_change < 0, 1, 0))
print(as.data.frame(mydata.i))
a <- (1, 1, 2)
a <- c(1, 1, 2)
a <- as.data.frame(a)
colnames(a)
a
a %>% disintc()
a %>% distinct()
